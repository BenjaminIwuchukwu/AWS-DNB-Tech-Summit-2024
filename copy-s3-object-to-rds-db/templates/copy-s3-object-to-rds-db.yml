AWSTemplateFormatVersion: 2010-09-09

Description: Infrastructure for copying data from S3 to database

Parameters:
  PymysqlLayerKey:
    Default: pymysql.zip
    Description: S3 object key for the MySQL python layer
    Type: String

  CopyScriptKey:
    Description: S3 object key for the copy data to database python script
    Type: String

  DBName:
    Default: MySQLDB
    Description: The MySQL Database name
    Type: String
    MinLength: "4"
    MaxLength: "64"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and contain only up to 64 alphanumeric characters.

  DBUsername:
    Description: Username for MySQL database access
    Type: String
    MinLength: "4"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only up to 16 alphanumeric characters.

  DBPassword:
    NoEcho: "true"
    Description: Password for MySQL database access
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must be between at least 8 characters and contain only up to 41 alphanumeric characters.

Resources:
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS DB Subnet Group
      SubnetIds:
        - !ImportValue SummitSubnet1
        - !ImportValue SummitSubnet2

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBName: !Ref DBName
      Engine: MySQL
      DBInstanceClass: db.t3.micro
      AllocatedStorage: "20"
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !ImportValue SummitVPCSG

  PymysqlLayer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      Content:
        S3Bucket: !ImportValue ScriptBucket
        S3Key: !Ref PymysqlLayerKey

  S3LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Environment:
        Variables:
          DBName: !Ref DBName
          DBUsername: !Ref DBUsername
          DBPassword: !Ref DBPassword
          DBHost: !GetAtt [DBInstance, Endpoint.Address]
      Layers:
        - !Ref PymysqlLayer
      Code:
        S3Bucket: !ImportValue ScriptBucket
        S3Key: !Ref CopyScriptKey
      Handler: S3LambdaFunction.handler
      Role: !ImportValue LambdaIAMRole
      Runtime: python3.10
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue SummitVPCSG
        SubnetIds:
          - !ImportValue SummitSubnet1
          - !ImportValue SummitSubnet2

  CustomResourceLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          s3 = boto3.resource('s3')
          def handler(event, context):
              responseData={}
              try:
                  if event['RequestType'] == 'Delete':
                      Bucket=event['ResourceProperties']['Bucket']
                      delete_notification(Bucket)
                      print("Sending response to custom resource after " + event['RequestType'] + " request.")
                  elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      LambdaArn=event['ResourceProperties']['LambdaArn']
                      Bucket=event['ResourceProperties']['Bucket']
                      add_notification(LambdaArn, Bucket)
                      responseData={'Bucket': Bucket}
                      print("Sending response to custom resource after " + event['RequestType'] + " request.")
                  responseStatus = 'SUCCESS'
              except Exception as e:
                  print('Failed to process:', e)
                  responseStatus = 'FAILED'
                  responseData = {'error': e}
              cfnresponse.send(event, context, responseStatus, responseData)
          def add_notification(LambdaArn, Bucket):
              s3.BucketNotification(Bucket).put(
                  NotificationConfiguration={
                      'LambdaFunctionConfigurations': [
                          {
                              'LambdaFunctionArn': LambdaArn,
                              'Events': [
                                  's3:ObjectCreated:*'
                              ]
                          }
                      ]
                  }
              )
              print("Add request completed.")
          def delete_notification(Bucket):
              s3.BucketNotification(Bucket).put(
                  NotificationConfiguration={}
              )
              print("Delete request completed.")
      Handler: index.handler
      Role: !ImportValue LambdaIAMRole
      Runtime: python3.10
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue SummitVPCSG
        SubnetIds:
          - !ImportValue SummitSubnet1
          - !ImportValue SummitSubnet2

  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt S3LambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: s3.amazonaws.com

  LambdaTrigger:
    Type: "Custom::LambdaTrigger"
    DependsOn: LambdaInvokePermission
    Properties:
      ServiceToken: !GetAtt CustomResourceLambdaFunction.Arn
      LambdaArn: !GetAtt S3LambdaFunction.Arn
      Bucket: !ImportValue JsonFilesBucket
